language: rust
cache:
  directories:
    - $HOME/.cargo
    - $TRAVIS_BUILD_DIR/target
    - $HOME/.rustup

addons:
  apt:
    packages:
      - libcurl4-openssl-dev
      - libelf-dev
      - libdw-dev
      - cmake
      - gcc
      - binutils-dev

stages:
  - lint
  - clippy
  - test

jobs:
  include:
    - &LINT
      stage: lint
      os: linux
      rust: stable
      before_script:
        - rustup component add rustfmt
      script:
        - cargo fmt --all -- --check
    - <<: *LINT
      rust: beta
    - <<: *LINT
      rust: nightly

    - stage: clippy
      os: linux
      rust: nightly
      before_script:
        - rustup component add clippy-preview
      script:
        - cargo clippy --all-targets --all-features

    - &TEST
      stage: test
      os: linux
      rust: stable
      script:
        - cargo test --verbose --all
      after_success: |
        wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&
        tar xzf master.tar.gz &&
        cd kcov-master &&
        mkdir build &&
        cd build &&
        cmake .. &&
        make &&
        make install DESTDIR=../../kcov-build &&
        cd ../.. &&
        rm -rf kcov-master &&
        for file in target/debug/freighter*; do [ -x "${file}" ] || continue; mkdir -p "target/cov/$(basename $file)"; ./kcov-build/usr/local/bin/kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file"; done &&
        bash <(curl -s https://codecov.io/bash) &&
        echo "Uploaded code coverage"
    - <<: *TEST
      rust: beta
    - <<: *TEST
      rust: nightly
    - <<: *TEST
      os: osx
      rust: stable
      after_success: ""
    - <<: *TEST
      os: osx
      rust: beta
      after_success: ""
    - <<: *TEST
      os: osx
      rust: nightly
      after_success: ""
    - &IOS_TEST
      stage: test
      os: osx
      rust: stable
      name: "iOS build"
      before_script:
        - rustup target add aarch64-apple-ios x86_64-apple-ios
        # TODO: Remove force flag when skiping existing crate is configurable in stable
        - cargo install --force cargo-lipo
      script:
        - cargo lipo --release --targets aarch64-apple-ios,x86_64-apple-ios
    - <<: *IOS_TEST
      rust: beta
    - <<: *IOS_TEST
      rust: nightly

